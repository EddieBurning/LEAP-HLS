// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sorted_insert_wrapper_2 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_bus_req_din,
        data_bus_req_full_n,
        data_bus_req_write,
        data_bus_rsp_empty_n,
        data_bus_rsp_read,
        data_bus_address,
        data_bus_datain,
        data_bus_dataout,
        data_bus_size,
        flist_req_din,
        flist_req_full_n,
        flist_req_write,
        flist_rsp_empty_n,
        flist_rsp_read,
        flist_address,
        flist_datain,
        flist_dataout,
        flist_size,
        n,
        val_r_dout,
        val_r_empty_n,
        val_r_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_ST_st4_fsm_3 = 2'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   data_bus_req_din;
input   data_bus_req_full_n;
output   data_bus_req_write;
input   data_bus_rsp_empty_n;
output   data_bus_rsp_read;
output  [31:0] data_bus_address;
input  [63:0] data_bus_datain;
output  [63:0] data_bus_dataout;
output  [31:0] data_bus_size;
output   flist_req_din;
input   flist_req_full_n;
output   flist_req_write;
input   flist_rsp_empty_n;
output   flist_rsp_read;
output  [31:0] flist_address;
input  [31:0] flist_datain;
output  [31:0] flist_dataout;
output  [31:0] flist_size;
input  [31:0] n;
input  [31:0] val_r_dout;
input   val_r_empty_n;
output   val_r_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg val_r_read;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg   [1:0] ap_CS_fsm = 2'b00;
wire   [31:0] i_1_fu_98_p2;
reg   [31:0] i_1_reg_132;
wire   [0:0] exitcond_fu_93_p2;
reg    ap_sig_bdd_67;
reg   [31:0] val_r_read_reg_137;
wire    grp_sorted_insert_fu_80_ap_done;
wire    grp_sorted_insert_fu_80_ap_start;
wire    grp_sorted_insert_fu_80_ap_idle;
wire    grp_sorted_insert_fu_80_ap_ready;
wire    grp_sorted_insert_fu_80_data_bus_req_din;
wire    grp_sorted_insert_fu_80_data_bus_req_full_n;
wire    grp_sorted_insert_fu_80_data_bus_req_write;
wire    grp_sorted_insert_fu_80_data_bus_rsp_empty_n;
wire    grp_sorted_insert_fu_80_data_bus_rsp_read;
wire   [31:0] grp_sorted_insert_fu_80_data_bus_address;
wire   [63:0] grp_sorted_insert_fu_80_data_bus_datain;
wire   [63:0] grp_sorted_insert_fu_80_data_bus_dataout;
wire   [31:0] grp_sorted_insert_fu_80_data_bus_size;
wire    grp_sorted_insert_fu_80_flist_req_din;
wire    grp_sorted_insert_fu_80_flist_req_full_n;
wire    grp_sorted_insert_fu_80_flist_req_write;
wire    grp_sorted_insert_fu_80_flist_rsp_empty_n;
wire    grp_sorted_insert_fu_80_flist_rsp_read;
wire   [31:0] grp_sorted_insert_fu_80_flist_address;
wire   [31:0] grp_sorted_insert_fu_80_flist_datain;
wire   [31:0] grp_sorted_insert_fu_80_flist_dataout;
wire   [31:0] grp_sorted_insert_fu_80_flist_size;
wire   [31:0] grp_sorted_insert_fu_80_next_free_location_read;
wire   [31:0] grp_sorted_insert_fu_80_queue;
wire   [31:0] grp_sorted_insert_fu_80_key;
wire   [31:0] grp_sorted_insert_fu_80_ap_return_0;
wire   [31:0] grp_sorted_insert_fu_80_ap_return_1;
reg   [31:0] next_free_location_reg_44;
reg   [31:0] result_reg_56;
reg   [31:0] i_reg_68;
reg    grp_sorted_insert_fu_80_ap_start_ap_start_reg = 1'b0;
reg   [31:0] ap_return_0_preg = 32'b00000000000000000000000000000000;
reg   [31:0] ap_return_1_preg = 32'b00000000000000000000000000000000;
reg   [1:0] ap_NS_fsm;


sorted_insert grp_sorted_insert_fu_80(
    .ap_clk( ap_clk ),
    .ap_rst_n( ap_rst_n ),
    .ap_start( grp_sorted_insert_fu_80_ap_start ),
    .ap_done( grp_sorted_insert_fu_80_ap_done ),
    .ap_idle( grp_sorted_insert_fu_80_ap_idle ),
    .ap_ready( grp_sorted_insert_fu_80_ap_ready ),
    .data_bus_req_din( grp_sorted_insert_fu_80_data_bus_req_din ),
    .data_bus_req_full_n( grp_sorted_insert_fu_80_data_bus_req_full_n ),
    .data_bus_req_write( grp_sorted_insert_fu_80_data_bus_req_write ),
    .data_bus_rsp_empty_n( grp_sorted_insert_fu_80_data_bus_rsp_empty_n ),
    .data_bus_rsp_read( grp_sorted_insert_fu_80_data_bus_rsp_read ),
    .data_bus_address( grp_sorted_insert_fu_80_data_bus_address ),
    .data_bus_datain( grp_sorted_insert_fu_80_data_bus_datain ),
    .data_bus_dataout( grp_sorted_insert_fu_80_data_bus_dataout ),
    .data_bus_size( grp_sorted_insert_fu_80_data_bus_size ),
    .flist_req_din( grp_sorted_insert_fu_80_flist_req_din ),
    .flist_req_full_n( grp_sorted_insert_fu_80_flist_req_full_n ),
    .flist_req_write( grp_sorted_insert_fu_80_flist_req_write ),
    .flist_rsp_empty_n( grp_sorted_insert_fu_80_flist_rsp_empty_n ),
    .flist_rsp_read( grp_sorted_insert_fu_80_flist_rsp_read ),
    .flist_address( grp_sorted_insert_fu_80_flist_address ),
    .flist_datain( grp_sorted_insert_fu_80_flist_datain ),
    .flist_dataout( grp_sorted_insert_fu_80_flist_dataout ),
    .flist_size( grp_sorted_insert_fu_80_flist_size ),
    .next_free_location_read( grp_sorted_insert_fu_80_next_free_location_read ),
    .queue( grp_sorted_insert_fu_80_queue ),
    .key( grp_sorted_insert_fu_80_key ),
    .ap_return_0( grp_sorted_insert_fu_80_ap_return_0 ),
    .ap_return_1( grp_sorted_insert_fu_80_ap_return_1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_0_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_0_preg
    if (ap_rst_n == 1'b0) begin
        ap_return_0_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~ap_sig_bdd_67 & ~(exitcond_fu_93_p2 == ap_const_lv1_0))) begin
            ap_return_0_preg <= result_reg_56;
        end
    end
end

/// ap_return_1_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_1_preg
    if (ap_rst_n == 1'b0) begin
        ap_return_1_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~ap_sig_bdd_67 & ~(exitcond_fu_93_p2 == ap_const_lv1_0))) begin
            ap_return_1_preg <= next_free_location_reg_44;
        end
    end
end

/// grp_sorted_insert_fu_80_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_sorted_insert_fu_80_ap_start_ap_start_reg
    if (ap_rst_n == 1'b0) begin
        grp_sorted_insert_fu_80_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
            grp_sorted_insert_fu_80_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_sorted_insert_fu_80_ap_ready)) begin
            grp_sorted_insert_fu_80_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_sorted_insert_fu_80_ap_done))) begin
        i_reg_68 <= i_1_reg_132;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_68 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_sorted_insert_fu_80_ap_done))) begin
        next_free_location_reg_44 <= grp_sorted_insert_fu_80_ap_return_1;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        next_free_location_reg_44 <= ap_const_lv32_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_sorted_insert_fu_80_ap_done))) begin
        result_reg_56 <= grp_sorted_insert_fu_80_ap_return_0;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        result_reg_56 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~ap_sig_bdd_67)) begin
        i_1_reg_132 <= i_1_fu_98_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond_fu_93_p2 == ap_const_lv1_0) & ~ap_sig_bdd_67)) begin
        val_r_read_reg_137 <= val_r_dout;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_93_p2 or ap_sig_bdd_67)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~ap_sig_bdd_67 & ~(exitcond_fu_93_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond_fu_93_p2 or ap_sig_bdd_67)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~ap_sig_bdd_67 & ~(exitcond_fu_93_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return_0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_93_p2 or ap_sig_bdd_67 or result_reg_56 or ap_return_0_preg)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~ap_sig_bdd_67 & ~(exitcond_fu_93_p2 == ap_const_lv1_0))) begin
        ap_return_0 = result_reg_56;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

/// ap_return_1 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_93_p2 or ap_sig_bdd_67 or next_free_location_reg_44 or ap_return_1_preg)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~ap_sig_bdd_67 & ~(exitcond_fu_93_p2 == ap_const_lv1_0))) begin
        ap_return_1 = next_free_location_reg_44;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

/// val_r_read assign process. ///
always @ (ap_CS_fsm or exitcond_fu_93_p2 or ap_sig_bdd_67)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond_fu_93_p2 == ap_const_lv1_0) & ~ap_sig_bdd_67)) begin
        val_r_read = ap_const_logic_1;
    end else begin
        val_r_read = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_fu_93_p2 or ap_sig_bdd_67 or grp_sorted_insert_fu_80_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((~ap_sig_bdd_67 & ~(exitcond_fu_93_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond_fu_93_p2 == ap_const_lv1_0) & ~ap_sig_bdd_67)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            if (~(ap_const_logic_0 == grp_sorted_insert_fu_80_ap_done)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_67 assign process. ///
always @ (val_r_empty_n or exitcond_fu_93_p2)
begin
    ap_sig_bdd_67 = ((val_r_empty_n == ap_const_logic_0) & (exitcond_fu_93_p2 == ap_const_lv1_0));
end
assign data_bus_address = grp_sorted_insert_fu_80_data_bus_address;
assign data_bus_dataout = grp_sorted_insert_fu_80_data_bus_dataout;
assign data_bus_req_din = grp_sorted_insert_fu_80_data_bus_req_din;
assign data_bus_req_write = grp_sorted_insert_fu_80_data_bus_req_write;
assign data_bus_rsp_read = grp_sorted_insert_fu_80_data_bus_rsp_read;
assign data_bus_size = grp_sorted_insert_fu_80_data_bus_size;
assign exitcond_fu_93_p2 = (i_reg_68 == n? 1'b1: 1'b0);
assign flist_address = grp_sorted_insert_fu_80_flist_address;
assign flist_dataout = grp_sorted_insert_fu_80_flist_dataout;
assign flist_req_din = grp_sorted_insert_fu_80_flist_req_din;
assign flist_req_write = grp_sorted_insert_fu_80_flist_req_write;
assign flist_rsp_read = grp_sorted_insert_fu_80_flist_rsp_read;
assign flist_size = grp_sorted_insert_fu_80_flist_size;
assign grp_sorted_insert_fu_80_ap_start = grp_sorted_insert_fu_80_ap_start_ap_start_reg;
assign grp_sorted_insert_fu_80_data_bus_datain = data_bus_datain;
assign grp_sorted_insert_fu_80_data_bus_req_full_n = data_bus_req_full_n;
assign grp_sorted_insert_fu_80_data_bus_rsp_empty_n = data_bus_rsp_empty_n;
assign grp_sorted_insert_fu_80_flist_datain = flist_datain;
assign grp_sorted_insert_fu_80_flist_req_full_n = flist_req_full_n;
assign grp_sorted_insert_fu_80_flist_rsp_empty_n = flist_rsp_empty_n;
assign grp_sorted_insert_fu_80_key = val_r_read_reg_137;
assign grp_sorted_insert_fu_80_next_free_location_read = next_free_location_reg_44;
assign grp_sorted_insert_fu_80_queue = result_reg_56;
assign i_1_fu_98_p2 = (i_reg_68 + ap_const_lv32_1);


endmodule //sorted_insert_wrapper_2

